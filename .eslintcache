[{"/home/siddhi/ADA-New-UI/cie-ui/src/pages/login/index.tsx":"1","/home/siddhi/ADA-New-UI/cie-ui/src/index.tsx":"2","/home/siddhi/ADA-New-UI/cie-ui/src/components/Routes/PrivateRoute.tsx":"3","/home/siddhi/ADA-New-UI/cie-ui/src/redux-setup/rootReducer.ts":"4","/home/siddhi/ADA-New-UI/cie-ui/src/redux-setup/history.ts":"5","/home/siddhi/ADA-New-UI/cie-ui/src/redux-middlewares-enhancers/token-middleware.ts":"6","/home/siddhi/ADA-New-UI/cie-ui/src/redux-setup/store.ts":"7","/home/siddhi/ADA-New-UI/cie-ui/src/features/login-flow/login-slice.tsx":"8","/home/siddhi/ADA-New-UI/cie-ui/src/constants/app-config-constants.ts":"9","/home/siddhi/ADA-New-UI/cie-ui/src/features/login-flow/login-thunks.tsx":"10","/home/siddhi/ADA-New-UI/cie-ui/src/pages/login/styles.tsx":"11"},{"size":3567,"mtime":1607421185196,"results":"12","hashOfConfig":"13"},{"size":985,"mtime":1607333199862,"results":"14","hashOfConfig":"13"},{"size":604,"mtime":1607332107174,"results":"15","hashOfConfig":"13"},{"size":330,"mtime":1607332107178,"results":"16","hashOfConfig":"13"},{"size":105,"mtime":1607332107178,"results":"17","hashOfConfig":"13"},{"size":548,"mtime":1607332107178,"results":"18","hashOfConfig":"13"},{"size":1672,"mtime":1607332107178,"results":"19","hashOfConfig":"13"},{"size":960,"mtime":1606391239900,"results":"20","hashOfConfig":"13"},{"size":133,"mtime":1606460638177,"results":"21","hashOfConfig":"13"},{"size":926,"mtime":1607333029609,"results":"22","hashOfConfig":"13"},{"size":2705,"mtime":1607421096623,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1xegda3",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/siddhi/ADA-New-UI/cie-ui/src/pages/login/index.tsx",["52","53","54"],"/home/siddhi/ADA-New-UI/cie-ui/src/index.tsx",["55"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./redux-setup/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Login from \"./pages/login\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport PrivateRoute from \"./components/Routes/PrivateRoute\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <PrivateRoute path=\"/\" component={<div>Home</div>} exact />\r\n        <Route exact path=\"/login\">\r\n          <Login />\r\n        </Route>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["56","57"],"/home/siddhi/ADA-New-UI/cie-ui/src/components/Routes/PrivateRoute.tsx",[],"/home/siddhi/ADA-New-UI/cie-ui/src/redux-setup/rootReducer.ts",[],"/home/siddhi/ADA-New-UI/cie-ui/src/redux-setup/history.ts",[],"/home/siddhi/ADA-New-UI/cie-ui/src/redux-middlewares-enhancers/token-middleware.ts",[],"/home/siddhi/ADA-New-UI/cie-ui/src/redux-setup/store.ts",["58"],"import {createStore,applyMiddleware} from '@reduxjs/toolkit';\nimport {routerMiddleware} from 'connected-react-router';\nimport rootReducer from './rootReducer'\nimport history from './history';\nimport thunk from \"redux-thunk\";\nimport logger,{createLogger} from 'redux-logger';\nimport tokenMiddleware from '../redux-middlewares-enhancers/token-middleware'\nconst Tlogger=createLogger({\n    predicate:(getState ,action)=>\n    {\n         console.log(\"predicate\", getState());\n         console.log(action.constructor.name)\n         return true\n    },\n    level:(data)=>{\n        switch(data.type){\n            case \"@@router/LOCATION_CHANGE\":\n                return \"info\";\n            default:\n                return \"log\";\n        }\n    },\n    stateTransformer:(state)=>{\n        switch(state.type){\n            case \"@@router/LOCATION_CHANGE\":\n                return state.router;\n            default:\n                return state;\n        }\n    },\n    actionTransformer:(action)=>{\n        switch(action.type){\n            case \"@@router/LOCATION_CHANGE\":\n                return {\n                    type:action.type,\n                    action:action.payload.action,\n                    path:action.payload.location.path\n                };\n            default:\n                return action;\n        }\n    },\n    diffPredicate:(getState,action)=>{\n        console.log(\"diffPred\",getState(),action);\n        return true;\n    },\n    collapsed:(getState,action)=>{\n        console.log(action.type);\n        return true;\n    }\n}) \nconst store=createStore(\n    rootReducer,\n    applyMiddleware(routerMiddleware(history),thunk, tokenMiddleware ,Tlogger)\n)\n\nexport default store;\n",["59","60"],"/home/siddhi/ADA-New-UI/cie-ui/src/features/login-flow/login-slice.tsx",["61"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport loggedInUserInitialState from \"./login-initial-state\";\n\nexport const loggedInUser = createSlice({\n  name: \"loggedInUser\",\n  initialState: loggedInUserInitialState,\n  reducers: {\n    loginStart: startLoading,\n    loginSuccess: loadingSuccess,\n    loginFailure: loadingFailed,\n    resetLoginState: resetLoginState,\n  },\n});\n\nfunction startLoading(state: any) {\n  state.isLoading = true;\n}\n\nfunction loadingFailed(state: any, action: any) {\n  state.loggedInUser.error = action.payload;\n  state.isLoading = false;\n  state.error = action.payload.message ? action.payload.message : \"\";\n}\n\nfunction loadingSuccess(state: any, action: any) {\n  state.loggedInUser = action.payload;\n  state.isLoading = false;\n  state.error = null;\n}\n\nfunction resetLoginState(state: any, action: any) {\n  state.loggedInUser = loggedInUserInitialState.loggedInUser;\n  state.isLoading = false;\n  state.error = null;\n}\n","/home/siddhi/ADA-New-UI/cie-ui/src/constants/app-config-constants.ts",[],"/home/siddhi/ADA-New-UI/cie-ui/src/features/login-flow/login-thunks.tsx",["62","63"],"//import { loginStart, loginSuccess, loginFailure } from \"../login-flow\";\nimport { AnyAction, ThunkAction, ThunkDispatch } from \"@reduxjs/toolkit\";\nimport { loginStart, loginFailure, loginSuccess } from \".\";\nimport { login } from \"../../services/login-service\";\nimport { push } from \"connected-react-router\";\nexport const authenticate = (\n  loginReqObject: any\n): ThunkAction<Promise<void>, {}, {}, any> => async (\n  dispatch: ThunkDispatch<{}, {}, AnyAction>\n) => {\n  try {\n    // dispatch(loginStart());\n    const loggedInUserInfo = await login(loginReqObject);\n    console.log(loggedInUserInfo);\n    if (loggedInUserInfo.type === \"error\") {\n      dispatch(loginFailure(loggedInUserInfo.error));\n    } else {\n      dispatch(push(\"/home\"));\n      //dispatch(loginSuccess(loggedInUserInfo));\n    }\n  } catch (err) {\n    // dispatch(loginFailure(err.toString()));\n    console.log(\"In the catch block\" + err.toString());\n  }\n};\n","/home/siddhi/ADA-New-UI/cie-ui/src/pages/login/styles.tsx",[],{"ruleId":"64","severity":1,"message":"65","line":10,"column":3,"nodeType":"66","messageId":"67","endLine":10,"endColumn":15},{"ruleId":"64","severity":1,"message":"68","line":36,"column":9,"nodeType":"66","messageId":"67","endLine":36,"endColumn":16},{"ruleId":"64","severity":1,"message":"69","line":37,"column":7,"nodeType":"66","messageId":"67","endLine":37,"endColumn":15},{"ruleId":"64","severity":1,"message":"70","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":11},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"64","severity":1,"message":"75","line":6,"column":8,"nodeType":"66","messageId":"67","endLine":6,"endColumn":14},{"ruleId":"71","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"64","severity":1,"message":"78","line":1,"column":23,"nodeType":"66","messageId":"67","endLine":1,"endColumn":36},{"ruleId":"64","severity":1,"message":"79","line":3,"column":10,"nodeType":"66","messageId":"67","endLine":3,"endColumn":20},{"ruleId":"64","severity":1,"message":"80","line":3,"column":36,"nodeType":"66","messageId":"67","endLine":3,"endColumn":48},"@typescript-eslint/no-unused-vars","'CustomButton' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'location' is assigned a value but never used.","'App' is defined but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"'logger' is defined but never used.",["81"],["82"],"'PayloadAction' is defined but never used.","'loginStart' is defined but never used.","'loginSuccess' is defined but never used.","no-global-assign","no-unsafe-negation"]